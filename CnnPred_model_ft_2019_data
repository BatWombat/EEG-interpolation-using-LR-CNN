import tensorflow as tf
import pandas as pd
import numpy as np
from keras.models import Model
from keras.layers import Input, Conv1D, MaxPooling1D, Flatten, Dense, Dropout
from keras.callbacks import EarlyStopping
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from tensorflow.keras.optimizers import Adam
import sklearn as sk


def CNN_model(X, y):
    input_layer = Input(shape=(X.shape[1],X.shape[2]))
    conv_layer_1 = Conv1D(filters=128, kernel_size=3, activation='linear')(input_layer)
    conv_layer_2 = Conv1D(filters=128, kernel_size=3, activation='linear')(conv_layer_1)
    conv_layer_3 = Conv1D(filters=128, kernel_size=3, activation='linear')(conv_layer_2)
    flatten_layer = Flatten()(conv_layer_2)
    dense_layer_1 = Dense(256, activation='linear')(flatten_layer)
    output_layer = Dense(1)(dense_layer_1)

    model = Model(inputs=input_layer, outputs=output_layer)
    
    optimizer = Adam(learning_rate=0.00001, beta_1=0.9, beta_2=0.999)
    model.compile(optimizer=optimizer, loss='mean_squared_error', metrics=['mean_squared_error'])
   
    early_stopping = EarlyStopping(monitor='val_loss', patience=2, verbose=1)
   
    model.fit(X, y, epochs=100, batch_size=32, verbose=1, validation_split=0.2, callbacks=[early_stopping])

    return model
    
    
    cols = ["F3", "Fz", "F4", "C3", "Cz", "C4", "P3", "Pz", "P4"]

datalist_2021 = ["Baseline_N400.csv", "Baseline_P600.csv", "Plausible_N400.csv", "Plausible_P600.csv", "Implausible_N400.csv", "Implausible_P600.csv"]
datalist_2019 = ["2019_Control_N400.csv", "2019_Control_P600.csv", "2019_script-related_N400.csv", "2019_script-related_P600.csv", "2019_script-unrelated_N400.csv", "2019_script-unrelated_P600.csv"]
scaler = StandardScaler()

for j, filename in enumerate(datalist_2021):
    
    data_2021 = pd.read_csv(filename)
    data_2019 = pd.read_csv(datalist_2019[j])
    
    timestamps = data_2019["Timestamp"]

    fig, axs = plt.subplots(3, 3, figsize = (10, 10))
    axs = axs.flatten()
    
    for i, col in enumerate(cols):
        X = data_2021[cols].drop(col, axis = 1).to_numpy()
        y = data_2021[col].to_numpy()
        
        X = scaler.fit_transform(X)
        X = X.reshape(-1, len(cols)-1, 1)
        
        model = CNN_model(X, y)

        X_2019 = data_2019[cols].drop(col, axis = 1).to_numpy()
        y_2019 = data_2019[col].to_numpy()
        
        X_2019 = scaler.transform(X_2019)
        X_2019 = X_2019.reshape(-1, len(cols)-1, 1)
    
        y_pred = model.predict(X_2019)
    
        mse = mean_squared_error(y_2019, y_pred)
   
        sort_idx = np.argsort(timestamps)
        x_sorted = timestamps[sort_idx]
        y_pred_sorted = y_pred[sort_idx]
        y_true_sorted = y_2019[sort_idx]

        unique_x, idx = np.unique(x_sorted, return_index=True)

        mean_y = []
        mean_true_y = []
        for j in range(len(unique_x)):
            if j < len(unique_x) - 1:
                mean_y.append(np.mean(y_pred_sorted[idx[j]:idx[j+1]]))
                mean_true_y.append(np.mean(y_true_sorted[idx[j]:idx[j+1]]))
            else:
                mean_y.append(np.mean(y_pred_sorted[idx[j]:]))
                mean_true_y.append(np.mean(y_true_sorted[idx[j]:]))
        
        axs[i].plot(unique_x, mean_true_y, label = "Mean true values")
        axs[i].plot(unique_x, mean_y, label='Mean predicted values', c = 'r')
        axs[i].legend()
        axs[i].set_title("{} MSE score: {:.2f}".format(col, mse))
        axs[i].set_xlabel("Timestamp")
        axs[i].set_ylabel("Mean value".format(col))
    
    fig.suptitle(filename[:-4])
    plt.tight_layout()
    plt.show()
