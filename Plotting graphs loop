cols = ["Fz", "Cz", "Pz", "C3", "F3", "C4", "P3", "F4", "P4", 'Timestamp']

datalist_2021 = ["Baseline.csv", "Plausible.csv", "Implausible.csv"]
datalist_2019 = ["2019_Control.csv", "2019_script-related.csv", "2019_script-unrelated.csv"]

early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)

for j, filename in enumerate(datalist_2021):
    
    data_2021 = pd.read_csv('Datasets/{}'.format(filename))
    data_2019 = pd.read_csv('Datasets/{}'.format(datalist_2019[j]))   

    fig, axs = plt.subplots(3, 3, figsize = (10, 10))
    axs = axs.flatten()
    
    for i, col in enumerate(cols):
        X = data_2021[cols].drop(col, axis = 1)
        if col == 'Timestamp':
            continue
        y = data_2021[col] 


        X_normed = norm(X)
        X = np.reshape(X_normed, (X_normed.shape[0], X_normed.shape[1], 1))


        model = build_model()

        checkpoint = ModelCheckpoint(model, monitor='val_loss', save_best_only=True)

        X_test = data_2019[cols].drop(col, axis = 1)
        y_test = data_2019[col]

        X_test_normed = norm(X_test)
        X_test = np.reshape(X_test_normed, (X_test_normed.shape[0], X_test_normed.shape[1], 1))

        EPOCHS = 100
        history = model.fit(X, y, epochs=EPOCHS, verbose=0, validation_data=(X_test, y_test), callbacks=[early_stop, PrintDot()])

        y_pred = model.predict(X_test)
        
        timestamp = data_2019['Timestamp']
        
        sort_idx = np.argsort(timestamp)
        x_sorted = timestamp[sort_idx]
        y_pred_sorted = y_pred[sort_idx]
        y_true_sorted = y_test[sort_idx]

        unique_x, idx = np.unique(x_sorted, return_index=True)

        mean_y = []
        mean_true_y = []
        for u in range(len(unique_x)):
            if u < len(unique_x) - 1:
                mean_y.append(np.mean(y_pred_sorted[idx[u]:idx[u+1]]))
                mean_true_y.append(np.mean(y_true_sorted[idx[u]:idx[u+1]]))
        else:
            mean_y.append(np.mean(y_pred_sorted[idx[u]:]))
            mean_true_y.append(np.mean(y_true_sorted[idx[u]:]))

        mse = mean_squared_error(y_pred, y_test)

        axs[i].plot(unique_x, mean_y, label="Means of Actual Values")
        axs[i].plot(unique_x, mean_true_y, label="Means of Predicted Values", c="r")
        axs[i].legend()
        axs[i].set_title("{} MSE score: {:.2f}".format(col, mse))
        axs[i].set_xlabel("Timestamp (ms)")
        axs[i].set_ylabel("Voltage (Î¼V)".format(col))
        


    fig.suptitle(datalist_2019[j][5:-4])
    plt.tight_layout()
    plt.show()
