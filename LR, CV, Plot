import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import KFold, cross_val_score, cross_val_predict
from sklearn.metrics import mean_squared_error
import numpy as np
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

data = pd.read_csv("Datasets/Baseline_P600.csv")

cols = ["FC1", "FC2", "CP1", "CP2"]
X = data[cols]
y = data["Cz"]

model = LinearRegression()
n_splits = 10

print(np.sqrt(-cross_val_score(lr, X, y, cv=n_splits, scoring='neg_mean_squared_error').mean()))
print(cross_val_score(model, X, y, cv = n_splits).mean())

timestamps = data["Timestamp"]
y_pred = cross_val_predict(model, X, y, cv=n_splits)

fig, ax = plt.subplots(2, 1, figsize=(10, 10))

ax[0].scatter(y, y_pred, s=0.2)
ax[0].plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=2)
ax[0].set_xlabel('Actual Values')
ax[0].set_ylabel('Predicted Values')
ax[0].set_title('Predicted values vs Actual values with Linear Regression and Cross-Validation')

ax[1].scatter(timestamps, y_pred, s=0.2)
ax[1].scatter(timestamps, y, s = 0.2, c ='r')
ax[1].set_xlabel('Timestamp')
ax[1].set_ylabel('Predicted Values')
ax[1].set_title('Predicted Values vs Timestamp with Linear Regression and Cross-Validation')

plt.tight_layout()
plt.show()
