import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

cols = ["Fz", "Cz", "Pz", "C3", "F3", "C4", "P3", "F4", "P4", 'Timestamp']

datalist_2021 = ["Baseline.csv", "Plausible.csv", "Implausible.csv"]
datalist_2019 = ["2019_Control.csv", "2019_script-related.csv", "2019_script-unrelated.csv"]


for j, filename in enumerate(datalist_2021):
    
    data_2021 = pd.read_csv('Datasets/{}'.format(filename))
    data_2019 = pd.read_csv('Datasets/{}'.format(datalist_2019[j]))
    
    timestamps = data_2019["Timestamp"]

    fig, axs = plt.subplots(3, 3, figsize = (10, 10))
    axs = axs.flatten()

    for i, col in enumerate(cols):
        X = data_2021[cols].drop(col, axis = 1)
        if col == 'Timestamp':
            continue
        y = data_2021[col]
    
    
        model = LinearRegression()
        model.fit(X, y)
    
        X_2019 = data_2019[cols].drop(col, axis = 1)
        y_2019 = data_2019[col]
    
        y_pred = model.predict(X_2019)
    
       
   
        actual_means = y_2019.groupby(timestamps).mean()
        pred_means = pd.Series(y_pred, index = y_2019.index).groupby(timestamps).mean()
        
        mse = mean_squared_error(y_2019, y_pred)

        axs[i].plot(actual_means.index, actual_means.values, label="Means of Actual Values")
        axs[i].plot(pred_means.index, pred_means.values, label="Means of Predicted Values", c="r")
        axs[i].legend()
        axs[i].set_title("{} MSE score: {:.2f}".format(col, mse))
        axs[i].set_xlabel("Timestamp (ms)")
        axs[i].set_ylabel("Voltage (Î¼V)".format(col))

    fig.suptitle(datalist_2019[j][5:-4])
    plt.tight_layout()
    plt.show()
