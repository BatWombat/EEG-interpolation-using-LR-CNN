cols = ["Fz", "Cz", "Pz", "C3", "F3", "C4", "P3", "F4", "P4", 'Timestamp']

datalist_2021 = ["Baseline.csv", "Plausible.csv", "Implausible.csv"]
datalist_2019 = ["2019_Control.csv", "2019_script-related.csv", "2019_script-unrelated.csv"]


for j, filename in enumerate(datalist_2021):
    
    data_2021 = pd.read_csv('Datasets/{}'.format(filename))
    data_2019 = pd.read_csv('Datasets/{}'.format(datalist_2019[j]))   

    fig, axs = plt.subplots(3, 3, figsize = (10, 10))
    axs = axs.flatten()
    
    first_trial = data_2019.loc[0, 'TrialNum']
    new_data_2019 = data_2019.loc[data_2019['TrialNum'] == first_trial]
    TrialNum = new_data_2019["TrialNum"][1]
    
    for i, col in enumerate(cols):
        X = data_2021[cols].drop(col, axis = 1)
        if col == 'Timestamp':
            continue
        y = data_2021[col] 


        X_normed = norm(X)
        X = np.reshape(X_normed, (X_normed.shape[0], X_normed.shape[1], 1))


        model = build_model()


        EPOCHS = 10
        history = model.fit(X, y, epochs=EPOCHS,
                            validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])

        first_trial = data_2019.loc[0, 'TrialNum']
        new_data_2019 = data_2019.loc[data_2019['TrialNum'] == first_trial]
        TrialNum = new_data_2019["TrialNum"][1]
        
        X_test = new_data_2019[cols].drop(col, axis = 1)
        y_test = new_data_2019[col]

        X_test_normed = norm(X_test)
        X_test = np.reshape(X_test_normed, (X_test_normed.shape[0], X_test_normed.shape[1], 1))


        y_pred = model.predict(X_test)
        
        timestamp = data_2019['Timestamp']

        sort_idx = np.argsort(timestamp)
        x_sorted = timestamp[sort_idx]
        y_pred_sorted = y_pred[sort_idx]
        y_true_sorted = y_test[sort_idx]

        unique_x, idx = np.unique(x_sorted, return_index=True)

        mean_y = []
        mean_true_y = []
        for j in range(len(unique_x)):
            if j < len(unique_x) - 1:
                mean_y.append(np.mean(y_pred_sorted[idx[j]:idx[j+1]]))
                mean_true_y.append(np.mean(y_true_sorted[idx[j]:idx[j+1]]))
        else:
            mean_y.append(np.mean(y_pred_sorted[idx[j]:]))
            mean_true_y.append(np.mean(y_true_sorted[idx[j]:]))

        mse = mean_squared_error(y_test, y_pred)

        axs[i].plot(unique_x, y_test, label="Actual Value")
        axs[i].plot(unique_x, y_pred, label="Predicted Value", c="r")
        axs[i].legend()
        axs[i].set_title("{} MSE score: {:.2f}".format(col, mse))
        axs[i].set_xlabel("Timestamp (ms)")
        axs[i].set_ylabel("Voltage (Î¼V)".format(col))

    fig.suptitle(datalist_2019[5:-4])
    plt.tight_layout()
    plt.show()
        
        

