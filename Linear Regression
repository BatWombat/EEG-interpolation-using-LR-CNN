import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

cols = ["Fz", "Cz", "Pz", "C3", "F3", "C4", "P3", "F4", "P4", 'Timestamp']

datalist_train = ["Baseline.csv", "Plausible.csv", "Implausible.csv"]
datalist_test = ["2019_Control.csv", "2019_Script-Related.csv", "2019_Script-Unrelated.csv"]


for j, filename in enumerate(datalist_train):
    
    data_train = pd.read_csv('Datasets/{}'.format(filename))
    data_test = pd.read_csv('Datasets/{}'.format(datalist_test[j]))
    
    timestamps = data_test["Timestamp"]

    fig, axs = plt.subplots(3, 3, figsize = (10, 10))
    axs = axs.flatten()

    for i, col in enumerate(cols):
        X_train = data_train[cols].drop(col, axis = 1)
        if col == 'Timestamp':
            continue
        y_train = data_train[col] 
    
    
        model = LinearRegression()
        model.fit(X_train, y_train)
    
        X_test = data_test[cols].drop(col, axis = 1)
        y_test = data_test[col]
    
        y_pred = model.predict(X_test)       
   
        actual_means = y_test.groupby(timestamps).mean()
        pred_means = pd.Series(y_pred, index = y_test.index).groupby(timestamps).mean()
        
        mse = mean_squared_error(actual_means, pred_means)

        axs[i].plot(actual_means.index, actual_means.values, label="Means of Actual Voltages")
        axs[i].plot(pred_means.index, pred_means.values, label="Means of Predicted Voltagess", c="r")
        axs[i].legend()
        axs[i].set_title("{} MSE score: {:.2f}".format(col, mse))
        axs[i].set_xlabel("Timestamp (ms)")
        axs[i].set_ylabel("Voltage (Î¼V)".format(col))
        axs[i].invert_yaxis()

    fig.suptitle("EEG interpolation of {} condition".format(datalist_test[j][5:-4]))
    plt.tight_layout()
    plt.show()
